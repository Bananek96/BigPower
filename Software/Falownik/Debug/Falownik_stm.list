
Falownik_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004360  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080044ec  080044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004534  08004534  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800453c  0800453c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004540  08004540  00005540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004544  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08004550  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004550  00006164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dce  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8e  00000000  00000000  00016e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00018d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca2  00000000  00000000  00019db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002161a  00000000  00000000  0001aa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119ca  00000000  00000000  0003c074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5f65  00000000  00000000  0004da3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001239a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004550  00000000  00000000  001239e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00127f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080044d4 	.word	0x080044d4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080044d4 	.word	0x080044d4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb91 	bl	8000c22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f80a 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9a2 	bl	800084c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000508:	f000 f8bc 	bl	8000684 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800050c:	f000 f96e 	bl	80007ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000510:	f000 f854 	bl	80005bc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x1c>

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	@ 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	@ 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 ffa7 	bl	800447a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800053e:	f001 fcf3 	bl	8001f28 <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 f9a4 	bl	8000894 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054c:	2310      	movs	r3, #16
 800054e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000558:	2360      	movs	r3, #96	@ 0x60
 800055a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000560:	2301      	movs	r3, #1
 8000562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000568:	2310      	movs	r3, #16
 800056a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056c:	2307      	movs	r3, #7
 800056e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fd29 	bl	8001fd4 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000588:	f000 f984 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 f929 	bl	80027fc <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b0:	f000 f970 	bl	8000894 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3758      	adds	r7, #88	@ 0x58
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
 80005d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d2:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005d4:	4a29      	ldr	r2, [pc, #164]	@ (800067c <MX_ADC1_Init+0xc0>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005d8:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ea:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f0:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ADC1_Init+0xbc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ADC1_Init+0xbc>)
 8000604:	2201      	movs	r2, #1
 8000606:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ADC1_Init+0xbc>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC1_Init+0xbc>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_ADC1_Init+0xbc>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_ADC1_Init+0xbc>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC1_Init+0xbc>)
 8000626:	2200      	movs	r2, #0
 8000628:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_ADC1_Init+0xbc>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000632:	4811      	ldr	r0, [pc, #68]	@ (8000678 <MX_ADC1_Init+0xbc>)
 8000634:	f000 fcf6 	bl	8001024 <HAL_ADC_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800063e:	f000 f929 	bl	8000894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_ADC1_Init+0xc4>)
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000646:	2306      	movs	r3, #6
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064e:	237f      	movs	r3, #127	@ 0x7f
 8000650:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000652:	2304      	movs	r3, #4
 8000654:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <MX_ADC1_Init+0xbc>)
 8000660:	f000 fe22 	bl	80012a8 <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800066a:	f000 f913 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	50040000 	.word	0x50040000
 8000680:	14f00020 	.word	0x14f00020

08000684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b096      	sub	sp, #88	@ 0x58
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	222c      	movs	r2, #44	@ 0x2c
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fee2 	bl	800447a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b6:	4b4b      	ldr	r3, [pc, #300]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006b8:	4a4b      	ldr	r2, [pc, #300]	@ (80007e8 <MX_TIM1_Init+0x164>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006bc:	4b49      	ldr	r3, [pc, #292]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b48      	ldr	r3, [pc, #288]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006c8:	4b46      	ldr	r3, [pc, #280]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b44      	ldr	r3, [pc, #272]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d6:	4b43      	ldr	r3, [pc, #268]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006e2:	4840      	ldr	r0, [pc, #256]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80006e4:	f002 fd96 	bl	8003214 <HAL_TIM_OC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 f8d1 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000702:	4619      	mov	r1, r3
 8000704:	4837      	ldr	r0, [pc, #220]	@ (80007e4 <MX_TIM1_Init+0x160>)
 8000706:	f003 f945 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000710:	f000 f8c0 	bl	8000894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000714:	2300      	movs	r3, #0
 8000716:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000730:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	482a      	ldr	r0, [pc, #168]	@ (80007e4 <MX_TIM1_Init+0x160>)
 800073a:	f002 fdc3 	bl	80032c4 <HAL_TIM_OC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000744:	f000 f8a6 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000748:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800074c:	2204      	movs	r2, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4824      	ldr	r0, [pc, #144]	@ (80007e4 <MX_TIM1_Init+0x160>)
 8000752:	f002 fdb7 	bl	80032c4 <HAL_TIM_OC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800075c:	f000 f89a 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000760:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000764:	2208      	movs	r2, #8
 8000766:	4619      	mov	r1, r3
 8000768:	481e      	ldr	r0, [pc, #120]	@ (80007e4 <MX_TIM1_Init+0x160>)
 800076a:	f002 fdab 	bl	80032c4 <HAL_TIM_OC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000774:	f000 f88e 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000778:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800077c:	220c      	movs	r2, #12
 800077e:	4619      	mov	r1, r3
 8000780:	4818      	ldr	r0, [pc, #96]	@ (80007e4 <MX_TIM1_Init+0x160>)
 8000782:	f002 fd9f 	bl	80032c4 <HAL_TIM_OC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800078c:	f000 f882 	bl	8000894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80007c6:	f003 f94b 	bl	8003a60 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80007d0:	f000 f860 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <MX_TIM1_Init+0x160>)
 80007d6:	f000 f90b 	bl	80009f0 <HAL_TIM_MspPostInit>

}
 80007da:	bf00      	nop
 80007dc:	3758      	adds	r7, #88	@ 0x58
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	40012c00 	.word	0x40012c00

080007ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <MX_USART1_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART1_UART_Init+0x58>)
 8000830:	f003 f98e 	bl	8003b50 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f82b 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000d8 	.word	0x200000d8
 8000848:	40013800 	.word	0x40013800

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_GPIO_Init+0x44>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a0e      	ldr	r2, [pc, #56]	@ (8000890 <MX_GPIO_Init+0x44>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_GPIO_Init+0x44>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_GPIO_Init+0x44>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <MX_GPIO_Init+0x44>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_GPIO_Init+0x44>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	4a0e      	ldr	r2, [pc, #56]	@ (80008e4 <HAL_MspInit+0x44>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09e      	sub	sp, #120	@ 0x78
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2254      	movs	r2, #84	@ 0x54
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f003 fdb6 	bl	800447a <memset>
  if(hadc->Instance==ADC1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a25      	ldr	r2, [pc, #148]	@ (80009a8 <HAL_ADC_MspInit+0xc0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d143      	bne.n	80009a0 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800091c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800091e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000922:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800092c:	2310      	movs	r3, #16
 800092e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000930:	2307      	movs	r3, #7
 8000932:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800093c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4618      	mov	r0, r3
 8000948:	f002 f97c 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000952:	f7ff ff9f 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_ADC_MspInit+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <HAL_ADC_MspInit+0xc4>)
 800095c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000962:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_ADC_MspInit+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_ADC_MspInit+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_ADC_MspInit+0xc4>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_ADC_MspInit+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000986:	2301      	movs	r3, #1
 8000988:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800098a:	230b      	movs	r3, #11
 800098c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f001 f94c 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009a0:	bf00      	nop
 80009a2:	3778      	adds	r7, #120	@ 0x78
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	50040000 	.word	0x50040000
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_TIM_OC_MspInit+0x38>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10b      	bne.n	80009da <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_TIM_OC_MspInit+0x3c>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c6:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_TIM_OC_MspInit+0x3c>)
 80009c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <HAL_TIM_OC_MspInit+0x3c>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40012c00 	.word	0x40012c00
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a20      	ldr	r2, [pc, #128]	@ (8000a90 <HAL_TIM_MspPostInit+0xa0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d139      	bne.n	8000a86 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <HAL_TIM_MspPostInit+0xa4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	4a1f      	ldr	r2, [pc, #124]	@ (8000a94 <HAL_TIM_MspPostInit+0xa4>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <HAL_TIM_MspPostInit+0xa4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <HAL_TIM_MspPostInit+0xa4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <HAL_TIM_MspPostInit+0xa4>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_TIM_MspPostInit+0xa4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a42:	2303      	movs	r3, #3
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <HAL_TIM_MspPostInit+0xa8>)
 8000a5e:	f001 f8eb 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000a62:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a82:	f001 f8d9 	bl	8001c38 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012c00 	.word	0x40012c00
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000400 	.word	0x48000400

08000a9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09e      	sub	sp, #120	@ 0x78
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	2254      	movs	r2, #84	@ 0x54
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fcdc 	bl	800447a <memset>
  if(huart->Instance==USART1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b44 <HAL_UART_MspInit+0xa8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d137      	bne.n	8000b3c <HAL_UART_MspInit+0xa0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 f8b3 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ae4:	f7ff fed6 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aec:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b04:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_UART_MspInit+0xac>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b38:	f001 f87e 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3778      	adds	r7, #120	@ 0x78
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40013800 	.word	0x40013800
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f893 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff ffea 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	@ (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fc45 	bl	800448c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fc79 	bl	80004f8 <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	08004544 	.word	0x08004544
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	20000164 	.word	0x20000164

08000c20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_IRQHandler>

08000c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 ffcf 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f80e 	bl	8000c54 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff fe2c 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d023      	beq.n	8000cb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_InitTick+0x70>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 ffcd 	bl	8001c1e <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10f      	bne.n	8000caa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d809      	bhi.n	8000ca4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 ffa5 	bl	8001be6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_InitTick+0x74>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e004      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e001      	b.n	8000cb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000160 	.word	0x20000160

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000160 	.word	0x20000160

08000d0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	609a      	str	r2, [r3, #8]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3360      	adds	r3, #96	@ 0x60
 8000d86:	461a      	mov	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <LL_ADC_SetOffset+0x44>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dac:	bf00      	nop
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	03fff000 	.word	0x03fff000

08000dbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3360      	adds	r3, #96	@ 0x60
 8000dca:	461a      	mov	r2, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3360      	adds	r3, #96	@ 0x60
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e12:	bf00      	nop
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b087      	sub	sp, #28
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3330      	adds	r3, #48	@ 0x30
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	4413      	add	r3, r2
 8000e3c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	211f      	movs	r1, #31
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	0e9b      	lsrs	r3, r3, #26
 8000e56:	f003 011f 	and.w	r1, r3, #31
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	431a      	orrs	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e6a:	bf00      	nop
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b087      	sub	sp, #28
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3314      	adds	r3, #20
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	0e5b      	lsrs	r3, r3, #25
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	0d1b      	lsrs	r3, r3, #20
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	401a      	ands	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	0d1b      	lsrs	r3, r3, #20
 8000eb0:	f003 031f 	and.w	r3, r3, #31
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0318 	and.w	r3, r3, #24
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ef0:	40d9      	lsrs	r1, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	0007ffff 	.word	0x0007ffff

08000f14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6093      	str	r3, [r2, #8]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f4c:	d101      	bne.n	8000f52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f9c:	d101      	bne.n	8000fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <LL_ADC_IsEnabled+0x18>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <LL_ADC_IsEnabled+0x1a>
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d101      	bne.n	8000fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b08      	cmp	r3, #8
 800100e:	d101      	bne.n	8001014 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e126      	b.n	800128c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001048:	2b00      	cmp	r3, #0
 800104a:	d109      	bne.n	8001060 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fc4b 	bl	80008e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff67 	bl	8000f38 <LL_ADC_IsDeepPowerDownEnabled>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff4d 	bl	8000f14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff82 	bl	8000f88 <LL_ADC_IsInternalRegulatorEnabled>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d115      	bne.n	80010b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff66 	bl	8000f60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001094:	4b7f      	ldr	r3, [pc, #508]	@ (8001294 <HAL_ADC_Init+0x270>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	099b      	lsrs	r3, r3, #6
 800109a:	4a7f      	ldr	r2, [pc, #508]	@ (8001298 <HAL_ADC_Init+0x274>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	099b      	lsrs	r3, r3, #6
 80010a2:	3301      	adds	r3, #1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010a8:	e002      	b.n	80010b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f9      	bne.n	80010aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff64 	bl	8000f88 <LL_ADC_IsInternalRegulatorEnabled>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10d      	bne.n	80010e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ca:	f043 0210 	orr.w	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff75 	bl	8000fd6 <LL_ADC_REG_IsConversionOngoing>
 80010ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80bf 	bne.w	800127a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 80bb 	bne.w	800127a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001108:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800110c:	f043 0202 	orr.w	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff49 	bl	8000fb0 <LL_ADC_IsEnabled>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001124:	485d      	ldr	r0, [pc, #372]	@ (800129c <HAL_ADC_Init+0x278>)
 8001126:	f7ff ff43 	bl	8000fb0 <LL_ADC_IsEnabled>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d105      	bne.n	800113c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4619      	mov	r1, r3
 8001136:	485a      	ldr	r0, [pc, #360]	@ (80012a0 <HAL_ADC_Init+0x27c>)
 8001138:	f7ff fde8 	bl	8000d0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e5b      	ldrb	r3, [r3, #25]
 8001140:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001146:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800114c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001152:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d106      	bne.n	8001178 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116e:	3b01      	subs	r3, #1
 8001170:	045b      	lsls	r3, r3, #17
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117c:	2b00      	cmp	r3, #0
 800117e:	d009      	beq.n	8001194 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	4b42      	ldr	r3, [pc, #264]	@ (80012a4 <HAL_ADC_Init+0x280>)
 800119c:	4013      	ands	r3, r2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	430b      	orrs	r3, r1
 80011a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff25 	bl	8000ffc <LL_ADC_INJ_IsConversionOngoing>
 80011b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d13d      	bne.n	8001236 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d13a      	bne.n	8001236 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011dc:	f023 0302 	bic.w	r3, r3, #2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	430b      	orrs	r3, r1
 80011e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d118      	bne.n	8001226 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80011fe:	f023 0304 	bic.w	r3, r3, #4
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800120a:	4311      	orrs	r1, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001210:	4311      	orrs	r1, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001216:	430a      	orrs	r2, r1
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	e007      	b.n	8001236 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10c      	bne.n	8001258 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	f023 010f 	bic.w	r1, r3, #15
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	631a      	str	r2, [r3, #48]	@ 0x30
 8001256:	e007      	b.n	8001268 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 020f 	bic.w	r2, r2, #15
 8001266:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800126c:	f023 0303 	bic.w	r3, r3, #3
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	655a      	str	r2, [r3, #84]	@ 0x54
 8001278:	e007      	b.n	800128a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127e:	f043 0210 	orr.w	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800128a:	7ffb      	ldrb	r3, [r7, #31]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	053e2d63 	.word	0x053e2d63
 800129c:	50040000 	.word	0x50040000
 80012a0:	50040300 	.word	0x50040300
 80012a4:	fff0c007 	.word	0xfff0c007

080012a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0b6      	sub	sp, #216	@ 0xd8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x22>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e3bb      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x79a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe7d 	bl	8000fd6 <LL_ADC_REG_IsConversionOngoing>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 83a0 	bne.w	8001a24 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d824      	bhi.n	800133e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	3b02      	subs	r3, #2
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d81b      	bhi.n	8001336 <HAL_ADC_ConfigChannel+0x8e>
 80012fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001304 <HAL_ADC_ConfigChannel+0x5c>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	08001315 	.word	0x08001315
 8001308:	0800131d 	.word	0x0800131d
 800130c:	08001325 	.word	0x08001325
 8001310:	0800132d 	.word	0x0800132d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001314:	230c      	movs	r3, #12
 8001316:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800131a:	e010      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800131c:	2312      	movs	r3, #18
 800131e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001322:	e00c      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001324:	2318      	movs	r3, #24
 8001326:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800132a:	e008      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800132c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001334:	e003      	b.n	800133e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001336:	2306      	movs	r3, #6
 8001338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800133c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800134c:	f7ff fd67 	bl	8000e1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe3e 	bl	8000fd6 <LL_ADC_REG_IsConversionOngoing>
 800135a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe4a 	bl	8000ffc <LL_ADC_INJ_IsConversionOngoing>
 8001368:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800136c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 81a4 	bne.w	80016be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 819f 	bne.w	80016be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	461a      	mov	r2, r3
 800138e:	f7ff fd72 	bl	8000e76 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d00a      	beq.n	80013ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6919      	ldr	r1, [r3, #16]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80013c4:	f7ff fcd6 	bl	8000d74 <LL_ADC_SetOffset>
 80013c8:	e179      	b.n	80016be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fcf3 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10a      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x14e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fce8 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	0e9b      	lsrs	r3, r3, #26
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	e01e      	b.n	8001434 <HAL_ADC_ConfigChannel+0x18c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fcdd 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001414:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800141c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001424:	2320      	movs	r3, #32
 8001426:	e004      	b.n	8001432 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1a4>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0e9b      	lsrs	r3, r3, #26
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	e018      	b.n	800147e <HAL_ADC_ConfigChannel+0x1d6>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001470:	2320      	movs	r3, #32
 8001472:	e004      	b.n	800147e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800147e:	429a      	cmp	r2, r3
 8001480:	d106      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fcac 	bl	8000de8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fc90 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10a      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x214>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fc85 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	0e9b      	lsrs	r3, r3, #26
 80014b6:	f003 021f 	and.w	r2, r3, #31
 80014ba:	e01e      	b.n	80014fa <HAL_ADC_ConfigChannel+0x252>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fc7a 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80014da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80014e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80014ea:	2320      	movs	r3, #32
 80014ec:	e004      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80014ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x26a>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0e9b      	lsrs	r3, r3, #26
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	e018      	b.n	8001544 <HAL_ADC_ConfigChannel+0x29c>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800152a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800152e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001536:	2320      	movs	r3, #32
 8001538:	e004      	b.n	8001544 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800153a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001544:	429a      	cmp	r2, r3
 8001546:	d106      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2200      	movs	r2, #0
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc49 	bl	8000de8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc2d 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x2da>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc22 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	0e9b      	lsrs	r3, r3, #26
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	e01e      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x318>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2102      	movs	r1, #2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fc17 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80015a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80015a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80015b0:	2320      	movs	r3, #32
 80015b2:	e004      	b.n	80015be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80015b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x330>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0e9b      	lsrs	r3, r3, #26
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	e014      	b.n	8001602 <HAL_ADC_ConfigChannel+0x35a>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80015e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80015ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80015f4:	2320      	movs	r3, #32
 80015f6:	e004      	b.n	8001602 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80015f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001602:	429a      	cmp	r2, r3
 8001604:	d106      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fbea 	bl	8000de8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2103      	movs	r1, #3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fbce 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10a      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x398>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2103      	movs	r1, #3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fbc3 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	0e9b      	lsrs	r3, r3, #26
 800163a:	f003 021f 	and.w	r2, r3, #31
 800163e:	e017      	b.n	8001670 <HAL_ADC_ConfigChannel+0x3c8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2103      	movs	r1, #3
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fbb8 	bl	8000dbc <LL_ADC_GetOffsetChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800165a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800165c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001662:	2320      	movs	r3, #32
 8001664:	e003      	b.n	800166e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x3e0>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0e9b      	lsrs	r3, r3, #26
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	e011      	b.n	80016ac <HAL_ADC_ConfigChannel+0x404>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001698:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800169a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e003      	b.n	80016ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80016a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d106      	bne.n	80016be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	2103      	movs	r1, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb95 	bl	8000de8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc74 	bl	8000fb0 <LL_ADC_IsEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 8140 	bne.w	8001950 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	461a      	mov	r2, r3
 80016de:	f7ff fbf5 	bl	8000ecc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001924 <HAL_ADC_ConfigChannel+0x67c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f040 8131 	bne.w	8001950 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x46e>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	0e9b      	lsrs	r3, r3, #26
 8001704:	3301      	adds	r3, #1
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	2b09      	cmp	r3, #9
 800170c:	bf94      	ite	ls
 800170e:	2301      	movls	r3, #1
 8001710:	2300      	movhi	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	e019      	b.n	800174a <HAL_ADC_ConfigChannel+0x4a2>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001726:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800172e:	2320      	movs	r3, #32
 8001730:	e003      	b.n	800173a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3301      	adds	r3, #1
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2b09      	cmp	r3, #9
 8001742:	bf94      	ite	ls
 8001744:	2301      	movls	r3, #1
 8001746:	2300      	movhi	r3, #0
 8001748:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800174a:	2b00      	cmp	r3, #0
 800174c:	d079      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_ADC_ConfigChannel+0x4c2>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0e9b      	lsrs	r3, r3, #26
 8001760:	3301      	adds	r3, #1
 8001762:	069b      	lsls	r3, r3, #26
 8001764:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001768:	e015      	b.n	8001796 <HAL_ADC_ConfigChannel+0x4ee>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800177a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800177c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001782:	2320      	movs	r3, #32
 8001784:	e003      	b.n	800178e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	069b      	lsls	r3, r3, #26
 8001792:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x50e>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0e9b      	lsrs	r3, r3, #26
 80017a8:	3301      	adds	r3, #1
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	e017      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x53e>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80017c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80017c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80017ce:	2320      	movs	r3, #32
 80017d0:	e003      	b.n	80017da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80017d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	ea42 0103 	orr.w	r1, r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <HAL_ADC_ConfigChannel+0x564>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0e9b      	lsrs	r3, r3, #26
 80017fc:	3301      	adds	r3, #1
 80017fe:	f003 021f 	and.w	r2, r3, #31
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	051b      	lsls	r3, r3, #20
 800180a:	e018      	b.n	800183e <HAL_ADC_ConfigChannel+0x596>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800181a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800181e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001824:	2320      	movs	r3, #32
 8001826:	e003      	b.n	8001830 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	f003 021f 	and.w	r2, r3, #31
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800183e:	430b      	orrs	r3, r1
 8001840:	e081      	b.n	8001946 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <HAL_ADC_ConfigChannel+0x5b6>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0e9b      	lsrs	r3, r3, #26
 8001854:	3301      	adds	r3, #1
 8001856:	069b      	lsls	r3, r3, #26
 8001858:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800185c:	e015      	b.n	800188a <HAL_ADC_ConfigChannel+0x5e2>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001876:	2320      	movs	r3, #32
 8001878:	e003      	b.n	8001882 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800187a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	069b      	lsls	r3, r3, #26
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x602>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0e9b      	lsrs	r3, r3, #26
 800189c:	3301      	adds	r3, #1
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	e017      	b.n	80018da <HAL_ADC_ConfigChannel+0x632>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	61bb      	str	r3, [r7, #24]
  return result;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80018c2:	2320      	movs	r3, #32
 80018c4:	e003      	b.n	80018ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	ea42 0103 	orr.w	r1, r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10d      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x65e>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0e9b      	lsrs	r3, r3, #26
 80018f0:	3301      	adds	r3, #1
 80018f2:	f003 021f 	and.w	r2, r3, #31
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	3b1e      	subs	r3, #30
 80018fe:	051b      	lsls	r3, r3, #20
 8001900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001904:	e01e      	b.n	8001944 <HAL_ADC_ConfigChannel+0x69c>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	60fb      	str	r3, [r7, #12]
  return result;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d104      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800191e:	2320      	movs	r3, #32
 8001920:	e006      	b.n	8001930 <HAL_ADC_ConfigChannel+0x688>
 8001922:	bf00      	nop
 8001924:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f003 021f 	and.w	r2, r3, #31
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	3b1e      	subs	r3, #30
 800193e:	051b      	lsls	r3, r3, #20
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001944:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff fa93 	bl	8000e76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <HAL_ADC_ConfigChannel+0x7a4>)
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06c      	beq.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800195c:	483c      	ldr	r0, [pc, #240]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 800195e:	f7ff f9fb 	bl	8000d58 <LL_ADC_GetCommonPathInternalCh>
 8001962:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a54 <HAL_ADC_ConfigChannel+0x7ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d127      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d121      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a35      	ldr	r2, [pc, #212]	@ (8001a58 <HAL_ADC_ConfigChannel+0x7b0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d157      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800198a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800198e:	4619      	mov	r1, r3
 8001990:	482f      	ldr	r0, [pc, #188]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 8001992:	f7ff f9ce 	bl	8000d32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001996:	4b31      	ldr	r3, [pc, #196]	@ (8001a5c <HAL_ADC_ConfigChannel+0x7b4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	4a30      	ldr	r2, [pc, #192]	@ (8001a60 <HAL_ADC_ConfigChannel+0x7b8>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019b0:	e002      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f9      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019be:	e03a      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a27      	ldr	r2, [pc, #156]	@ (8001a64 <HAL_ADC_ConfigChannel+0x7bc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d113      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <HAL_ADC_ConfigChannel+0x7b0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d12a      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e8:	4619      	mov	r1, r3
 80019ea:	4819      	ldr	r0, [pc, #100]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 80019ec:	f7ff f9a1 	bl	8000d32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019f0:	e021      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a68 <HAL_ADC_ConfigChannel+0x7c0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11c      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d116      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <HAL_ADC_ConfigChannel+0x7b0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d111      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a1e:	f7ff f988 	bl	8000d32 <LL_ADC_SetCommonPathInternalCh>
 8001a22:	e008      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	37d8      	adds	r7, #216	@ 0xd8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	80080000 	.word	0x80080000
 8001a50:	50040300 	.word	0x50040300
 8001a54:	c7520000 	.word	0xc7520000
 8001a58:	50040000 	.word	0x50040000
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	053e2d63 	.word	0x053e2d63
 8001a64:	cb840000 	.word	0xcb840000
 8001a68:	80000001 	.word	0x80000001

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff47 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff5c 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffb0 	bl	8001b8c <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	e148      	b.n	8001eda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 813a 	beq.w	8001ed4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <HAL_GPIO_Init+0x40>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d130      	bne.n	8001cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0201 	and.w	r2, r3, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d017      	beq.n	8001d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d123      	bne.n	8001d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	6939      	ldr	r1, [r7, #16]
 8001d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0203 	and.w	r2, r3, #3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8094 	beq.w	8001ed4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dac:	4b52      	ldr	r3, [pc, #328]	@ (8001ef8 <HAL_GPIO_Init+0x2c0>)
 8001dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db0:	4a51      	ldr	r2, [pc, #324]	@ (8001ef8 <HAL_GPIO_Init+0x2c0>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <HAL_GPIO_Init+0x2c0>)
 8001dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8001efc <HAL_GPIO_Init+0x2c4>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dee:	d00d      	beq.n	8001e0c <HAL_GPIO_Init+0x1d4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a43      	ldr	r2, [pc, #268]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0x1d0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a42      	ldr	r2, [pc, #264]	@ (8001f04 <HAL_GPIO_Init+0x2cc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_GPIO_Init+0x1cc>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e004      	b.n	8001e0e <HAL_GPIO_Init+0x1d6>
 8001e04:	2307      	movs	r3, #7
 8001e06:	e002      	b.n	8001e0e <HAL_GPIO_Init+0x1d6>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_GPIO_Init+0x1d6>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	f002 0203 	and.w	r2, r2, #3
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4093      	lsls	r3, r2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1e:	4937      	ldr	r1, [pc, #220]	@ (8001efc <HAL_GPIO_Init+0x2c4>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2c:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e50:	4a2d      	ldr	r2, [pc, #180]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7a:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e80:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea4:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ece:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f aeaf 	bne.w	8001c48 <HAL_GPIO_Init+0x10>
  }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	48000400 	.word	0x48000400
 8001f04:	48000800 	.word	0x48000800
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40007000 	.word	0x40007000

08001f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f36:	d130      	bne.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f44:	d038      	beq.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f46:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2232      	movs	r2, #50	@ 0x32
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6c:	e002      	b.n	8001f74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f74:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f80:	d102      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f2      	bne.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f94:	d110      	bne.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e00f      	b.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa6:	d007      	beq.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb0:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f000 bc02 	b.w	80027ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe8:	4b96      	ldr	r3, [pc, #600]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff2:	4b94      	ldr	r3, [pc, #592]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80e4 	beq.w	80021d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_RCC_OscConfig+0x4c>
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	f040 808b 	bne.w	800212e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 8087 	bne.w	800212e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002020:	4b88      	ldr	r3, [pc, #544]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x64>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e3d9      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1a      	ldr	r2, [r3, #32]
 800203c:	4b81      	ldr	r3, [pc, #516]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_RCC_OscConfig+0x7e>
 8002048:	4b7e      	ldr	r3, [pc, #504]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002050:	e005      	b.n	800205e <HAL_RCC_OscConfig+0x8a>
 8002052:	4b7c      	ldr	r3, [pc, #496]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800205e:	4293      	cmp	r3, r2
 8002060:	d223      	bcs.n	80020aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fd8c 	bl	8002b84 <RCC_SetFlashLatencyFromMSIRange>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e3ba      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002076:	4b73      	ldr	r3, [pc, #460]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a72      	ldr	r2, [pc, #456]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b70      	ldr	r3, [pc, #448]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	496d      	ldr	r1, [pc, #436]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002094:	4b6b      	ldr	r3, [pc, #428]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	4968      	ldr	r1, [pc, #416]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	e025      	b.n	80020f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020aa:	4b66      	ldr	r3, [pc, #408]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a65      	ldr	r2, [pc, #404]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b63      	ldr	r3, [pc, #396]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4960      	ldr	r1, [pc, #384]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	495b      	ldr	r1, [pc, #364]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fd4c 	bl	8002b84 <RCC_SetFlashLatencyFromMSIRange>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e37a      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f6:	f000 fc81 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b51      	ldr	r3, [pc, #324]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4950      	ldr	r1, [pc, #320]	@ (8002248 <HAL_RCC_OscConfig+0x274>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a4e      	ldr	r2, [pc, #312]	@ (800224c <HAL_RCC_OscConfig+0x278>)
 8002114:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002116:	4b4e      	ldr	r3, [pc, #312]	@ (8002250 <HAL_RCC_OscConfig+0x27c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fd9a 	bl	8000c54 <HAL_InitTick>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d052      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	e35e      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d032      	beq.n	800219c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002136:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a42      	ldr	r2, [pc, #264]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002142:	f7fe fdd7 	bl	8000cf4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800214a:	f7fe fdd3 	bl	8000cf4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e347      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800215c:	4b39      	ldr	r3, [pc, #228]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002168:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a35      	ldr	r2, [pc, #212]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b33      	ldr	r3, [pc, #204]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4930      	ldr	r1, [pc, #192]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002186:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	492b      	ldr	r1, [pc, #172]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
 800219a:	e01a      	b.n	80021d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fda4 	bl	8000cf4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b0:	f7fe fda0 	bl	8000cf4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e314      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1dc>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d073      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x21c>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d10e      	bne.n	8002208 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4b14      	ldr	r3, [pc, #80]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d063      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d15f      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e2f1      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x24c>
 8002212:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0b      	ldr	r2, [pc, #44]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e025      	b.n	800226c <HAL_RCC_OscConfig+0x298>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002228:	d114      	bne.n	8002254 <HAL_RCC_OscConfig+0x280>
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a02      	ldr	r2, [pc, #8]	@ (8002244 <HAL_RCC_OscConfig+0x270>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e013      	b.n	800226c <HAL_RCC_OscConfig+0x298>
 8002244:	40021000 	.word	0x40021000
 8002248:	080044ec 	.word	0x080044ec
 800224c:	20000000 	.word	0x20000000
 8002250:	20000004 	.word	0x20000004
 8002254:	4ba0      	ldr	r3, [pc, #640]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a9f      	ldr	r2, [pc, #636]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b9d      	ldr	r3, [pc, #628]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a9c      	ldr	r2, [pc, #624]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fd3e 	bl	8000cf4 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe fd3a 	bl	8000cf4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e2ae      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	4b92      	ldr	r3, [pc, #584]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x2a8>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fd2a 	bl	8000cf4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fd26 	bl	8000cf4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e29a      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	4b88      	ldr	r3, [pc, #544]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2d0>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d060      	beq.n	8002394 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x310>
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d119      	bne.n	8002312 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d116      	bne.n	8002312 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e4:	4b7c      	ldr	r3, [pc, #496]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_OscConfig+0x328>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e277      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	4973      	ldr	r1, [pc, #460]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002310:	e040      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d023      	beq.n	8002362 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231a:	4b6f      	ldr	r3, [pc, #444]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fce5 	bl	8000cf4 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232e:	f7fe fce1 	bl	8000cf4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e255      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002340:	4b65      	ldr	r3, [pc, #404]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234c:	4b62      	ldr	r3, [pc, #392]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	061b      	lsls	r3, r3, #24
 800235a:	495f      	ldr	r1, [pc, #380]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e018      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002362:	4b5d      	ldr	r3, [pc, #372]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5c      	ldr	r2, [pc, #368]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800236c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe fcc1 	bl	8000cf4 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7fe fcbd 	bl	8000cf4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e231      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002388:	4b53      	ldr	r3, [pc, #332]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d03c      	beq.n	800241a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a8:	4b4b      	ldr	r3, [pc, #300]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ae:	4a4a      	ldr	r2, [pc, #296]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fc9c 	bl	8000cf4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7fe fc98 	bl	8000cf4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e20c      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d2:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <HAL_RCC_OscConfig+0x3ec>
 80023e0:	e01b      	b.n	800241a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b3d      	ldr	r3, [pc, #244]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e8:	4a3b      	ldr	r2, [pc, #236]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe fc7f 	bl	8000cf4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fa:	f7fe fc7b 	bl	8000cf4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1ef      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240c:	4b32      	ldr	r3, [pc, #200]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800240e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ef      	bne.n	80023fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80a6 	beq.w	8002574 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800242c:	4b2a      	ldr	r3, [pc, #168]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10d      	bne.n	8002454 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	4a26      	ldr	r2, [pc, #152]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002442:	6593      	str	r3, [r2, #88]	@ 0x58
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002450:	2301      	movs	r3, #1
 8002452:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <HAL_RCC_OscConfig+0x508>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d118      	bne.n	8002492 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002460:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <HAL_RCC_OscConfig+0x508>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <HAL_RCC_OscConfig+0x508>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246c:	f7fe fc42 	bl	8000cf4 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fc3e 	bl	8000cf4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1b2      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_RCC_OscConfig+0x508>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_RCC_OscConfig+0x4d8>
 800249a:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024aa:	e029      	b.n	8002500 <HAL_RCC_OscConfig+0x52c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d115      	bne.n	80024e0 <HAL_RCC_OscConfig+0x50c>
 80024b4:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ba:	4a07      	ldr	r2, [pc, #28]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024c4:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ca:	4a03      	ldr	r2, [pc, #12]	@ (80024d8 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x52c>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	4b9a      	ldr	r3, [pc, #616]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e6:	4a99      	ldr	r2, [pc, #612]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024f0:	4b96      	ldr	r3, [pc, #600]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f6:	4a95      	ldr	r2, [pc, #596]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fbf4 	bl	8000cf4 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7fe fbf0 	bl	8000cf4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e162      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002526:	4b89      	ldr	r3, [pc, #548]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ed      	beq.n	8002510 <HAL_RCC_OscConfig+0x53c>
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7fe fbdd 	bl	8000cf4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7fe fbd9 	bl	8000cf4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e14b      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002554:	4b7d      	ldr	r3, [pc, #500]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ed      	bne.n	800253e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002562:	7ffb      	ldrb	r3, [r7, #31]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b78      	ldr	r3, [pc, #480]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	4a77      	ldr	r2, [pc, #476]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 800256e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d03c      	beq.n	80025fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002588:	4b70      	ldr	r3, [pc, #448]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 800258a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800258e:	4a6f      	ldr	r2, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe fbac 	bl	8000cf4 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a0:	f7fe fba8 	bl	8000cf4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e11c      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025b2:	4b66      	ldr	r3, [pc, #408]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80025b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ef      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5cc>
 80025c0:	e01b      	b.n	80025fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025c2:	4b62      	ldr	r3, [pc, #392]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80025c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025c8:	4a60      	ldr	r2, [pc, #384]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe fb8f 	bl	8000cf4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025da:	f7fe fb8b 	bl	8000cf4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0ff      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025ec:	4b57      	ldr	r3, [pc, #348]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80025ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ef      	bne.n	80025da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80f3 	beq.w	80027ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	2b02      	cmp	r3, #2
 800260a:	f040 80c9 	bne.w	80027a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800260e:	4b4f      	ldr	r3, [pc, #316]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0203 	and.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	429a      	cmp	r2, r3
 8002620:	d12c      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	3b01      	subs	r3, #1
 800262e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d123      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d11b      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d113      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d109      	bne.n	800267c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	3b01      	subs	r3, #1
 8002676:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d06b      	beq.n	8002754 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d062      	beq.n	8002748 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002682:	4b32      	ldr	r3, [pc, #200]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0ac      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002692:	4b2e      	ldr	r3, [pc, #184]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2d      	ldr	r2, [pc, #180]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002698:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800269e:	f7fe fb29 	bl	8000cf4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fb25 	bl	8000cf4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e099      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b8:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c4:	4b21      	ldr	r3, [pc, #132]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <HAL_RCC_OscConfig+0x77c>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	4311      	orrs	r1, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026de:	0212      	lsls	r2, r2, #8
 80026e0:	4311      	orrs	r1, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026e6:	0852      	lsrs	r2, r2, #1
 80026e8:	3a01      	subs	r2, #1
 80026ea:	0552      	lsls	r2, r2, #21
 80026ec:	4311      	orrs	r1, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026f2:	0852      	lsrs	r2, r2, #1
 80026f4:	3a01      	subs	r2, #1
 80026f6:	0652      	lsls	r2, r2, #25
 80026f8:	4311      	orrs	r1, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026fe:	06d2      	lsls	r2, r2, #27
 8002700:	430a      	orrs	r2, r1
 8002702:	4912      	ldr	r1, [pc, #72]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002704:	4313      	orrs	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0f      	ldr	r2, [pc, #60]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a0c      	ldr	r2, [pc, #48]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002720:	f7fe fae8 	bl	8000cf4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fae4 	bl	8000cf4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e058      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b04      	ldr	r3, [pc, #16]	@ (800274c <HAL_RCC_OscConfig+0x778>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002746:	e050      	b.n	80027ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e04f      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
 800274c:	40021000 	.word	0x40021000
 8002750:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002754:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d144      	bne.n	80027ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002760:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a23      	ldr	r2, [pc, #140]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 8002766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800276c:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a20      	ldr	r2, [pc, #128]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002778:	f7fe fabc 	bl	8000cf4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fab8 	bl	8000cf4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e02c      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	4b18      	ldr	r3, [pc, #96]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x7ac>
 800279e:	e024      	b.n	80027ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d01f      	beq.n	80027e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a12      	ldr	r2, [pc, #72]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 80027ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fa9f 	bl	8000cf4 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe fa9b 	bl	8000cf4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e00f      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4905      	ldr	r1, [pc, #20]	@ (80027f4 <HAL_RCC_OscConfig+0x820>)
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x824>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
 80027e4:	e001      	b.n	80027ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	feeefffc 	.word	0xfeeefffc

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0e7      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b75      	ldr	r3, [pc, #468]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d910      	bls.n	8002840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b72      	ldr	r3, [pc, #456]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4970      	ldr	r1, [pc, #448]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b6e      	ldr	r3, [pc, #440]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0cf      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002858:	429a      	cmp	r2, r3
 800285a:	d908      	bls.n	800286e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4960      	ldr	r1, [pc, #384]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d04c      	beq.n	8002914 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b5a      	ldr	r3, [pc, #360]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d121      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0a6      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289a:	4b54      	ldr	r3, [pc, #336]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d115      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e09a      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b2:	4b4e      	ldr	r3, [pc, #312]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e08e      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c2:	4b4a      	ldr	r3, [pc, #296]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e086      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d2:	4b46      	ldr	r3, [pc, #280]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4943      	ldr	r1, [pc, #268]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e4:	f7fe fa06 	bl	8000cf4 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7fe fa02 	bl	8000cf4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e06e      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	4b3a      	ldr	r3, [pc, #232]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 020c 	and.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d1eb      	bne.n	80028ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292c:	429a      	cmp	r2, r3
 800292e:	d208      	bcs.n	8002942 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	492b      	ldr	r1, [pc, #172]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002942:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d210      	bcs.n	8002972 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 0207 	bic.w	r2, r3, #7
 8002958:	4923      	ldr	r1, [pc, #140]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e036      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4918      	ldr	r1, [pc, #96]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4910      	ldr	r1, [pc, #64]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b0:	f000 f824 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	490b      	ldr	r1, [pc, #44]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f4>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_RCC_ClockConfig+0x1fc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f93d 	bl	8000c54 <HAL_InitTick>
 80029da:	4603      	mov	r3, r0
 80029dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80029de:	7afb      	ldrb	r3, [r7, #11]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40021000 	.word	0x40021000
 80029f0:	080044ec 	.word	0x080044ec
 80029f4:	20000000 	.word	0x20000000
 80029f8:	20000004 	.word	0x20000004

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a14:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x34>
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d121      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d11e      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a30:	4b34      	ldr	r3, [pc, #208]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e005      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a58:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	e004      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a80:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d134      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xac>
 8002aa0:	e005      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa4:	617b      	str	r3, [r7, #20]
      break;
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aaa:	617b      	str	r3, [r7, #20]
      break;
 8002aac:	e002      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	617b      	str	r3, [r7, #20]
      break;
 8002ab2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	3301      	adds	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	fb03 f202 	mul.w	r2, r3, r2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	0e5b      	lsrs	r3, r3, #25
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002af4:	69bb      	ldr	r3, [r7, #24]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	@ 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08004504 	.word	0x08004504
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	007a1200 	.word	0x007a1200

08002b14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b18:	4b03      	ldr	r3, [pc, #12]	@ (8002b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000000 	.word	0x20000000

08002b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b30:	f7ff fff0 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4904      	ldr	r1, [pc, #16]	@ (8002b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	080044fc 	.word	0x080044fc

08002b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b5c:	f7ff ffda 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0adb      	lsrs	r3, r3, #11
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4904      	ldr	r1, [pc, #16]	@ (8002b80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	080044fc 	.word	0x080044fc

08002b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b90:	4b2a      	ldr	r3, [pc, #168]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b9c:	f7ff f9b6 	bl	8001f0c <HAL_PWREx_GetVoltageRange>
 8002ba0:	6178      	str	r0, [r7, #20]
 8002ba2:	e014      	b.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	4a24      	ldr	r2, [pc, #144]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb0:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bbc:	f7ff f9a6 	bl	8001f0c <HAL_PWREx_GetVoltageRange>
 8002bc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd4:	d10b      	bne.n	8002bee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b80      	cmp	r3, #128	@ 0x80
 8002bda:	d919      	bls.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2ba0      	cmp	r3, #160	@ 0xa0
 8002be0:	d902      	bls.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be2:	2302      	movs	r3, #2
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e013      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be8:	2301      	movs	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e010      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b80      	cmp	r3, #128	@ 0x80
 8002bf2:	d902      	bls.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e00a      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b80      	cmp	r3, #128	@ 0x80
 8002bfe:	d102      	bne.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c00:	2302      	movs	r3, #2
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	e004      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b70      	cmp	r3, #112	@ 0x70
 8002c0a:	d101      	bne.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	4909      	ldr	r1, [pc, #36]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c20:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40022000 	.word	0x40022000

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c50:	2300      	movs	r3, #0
 8002c52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d031      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c64:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c68:	d01a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c6a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c6e:	d814      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f9ce 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c98:	e003      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca2:	7cfb      	ldrb	r3, [r7, #19]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca8:	4b51      	ldr	r3, [pc, #324]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb6:	494e      	ldr	r1, [pc, #312]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cbe:	e001      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 809e 	beq.w	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cd6:	4b46      	ldr	r3, [pc, #280]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b40      	ldr	r3, [pc, #256]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	4a3f      	ldr	r2, [pc, #252]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d08:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a39      	ldr	r2, [pc, #228]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d14:	f7fd ffee 	bl	8000cf4 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d1a:	e009      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fd ffea 	bl	8000cf4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d902      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ef      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d15a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d42:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d019      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d5e:	4b24      	ldr	r3, [pc, #144]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d6a:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d70:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d80:	4a1b      	ldr	r2, [pc, #108]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d8a:	4a19      	ldr	r2, [pc, #100]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d016      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fd ffaa 	bl	8000cf4 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da2:	e00b      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fd ffa6 	bl	8000cf4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d902      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	74fb      	strb	r3, [r7, #19]
            break;
 8002dba:	e006      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ec      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dde:	4904      	ldr	r1, [pc, #16]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002de6:	e009      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
 8002dec:	e006      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfc:	7c7b      	ldrb	r3, [r7, #17]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e02:	4b8a      	ldr	r3, [pc, #552]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e06:	4a89      	ldr	r2, [pc, #548]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e1a:	4b84      	ldr	r3, [pc, #528]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e20:	f023 0203 	bic.w	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4980      	ldr	r1, [pc, #512]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e3c:	4b7b      	ldr	r3, [pc, #492]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	f023 020c 	bic.w	r2, r3, #12
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	4978      	ldr	r1, [pc, #480]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e5e:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	496f      	ldr	r1, [pc, #444]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e80:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	4967      	ldr	r1, [pc, #412]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ea2:	4b62      	ldr	r3, [pc, #392]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	495e      	ldr	r1, [pc, #376]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec4:	4b59      	ldr	r3, [pc, #356]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	4956      	ldr	r1, [pc, #344]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee6:	4b51      	ldr	r3, [pc, #324]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	494d      	ldr	r1, [pc, #308]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d028      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f08:	4b48      	ldr	r3, [pc, #288]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	4945      	ldr	r1, [pc, #276]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f28:	4b40      	ldr	r3, [pc, #256]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f32:	60d3      	str	r3, [r2, #12]
 8002f34:	e011      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f872 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d028      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f66:	4b31      	ldr	r3, [pc, #196]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	492d      	ldr	r1, [pc, #180]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f84:	d106      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f86:	4b29      	ldr	r3, [pc, #164]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a28      	ldr	r2, [pc, #160]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f90:	60d3      	str	r3, [r2, #12]
 8002f92:	e011      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f843 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	4916      	ldr	r1, [pc, #88]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f820 	bl	8003030 <RCCEx_PLLSAI1_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003010:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003018:	4904      	ldr	r1, [pc, #16]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003020:	7cbb      	ldrb	r3, [r7, #18]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303e:	4b74      	ldr	r3, [pc, #464]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800304a:	4b71      	ldr	r3, [pc, #452]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d10d      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
       ||
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003062:	4b6b      	ldr	r3, [pc, #428]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
       ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d047      	beq.n	8003106 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e044      	b.n	8003106 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d018      	beq.n	80030b6 <RCCEx_PLLSAI1_Config+0x86>
 8003084:	2b03      	cmp	r3, #3
 8003086:	d825      	bhi.n	80030d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003088:	2b01      	cmp	r3, #1
 800308a:	d002      	beq.n	8003092 <RCCEx_PLLSAI1_Config+0x62>
 800308c:	2b02      	cmp	r3, #2
 800308e:	d009      	beq.n	80030a4 <RCCEx_PLLSAI1_Config+0x74>
 8003090:	e020      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003092:	4b5f      	ldr	r3, [pc, #380]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11d      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a2:	e01a      	b.n	80030da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b4:	e013      	b.n	80030de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030b6:	4b56      	ldr	r3, [pc, #344]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030c2:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030d2:	e006      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      break;
 80030d8:	e004      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030da:	bf00      	nop
 80030dc:	e002      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10d      	bne.n	8003106 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ea:	4b49      	ldr	r3, [pc, #292]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	430b      	orrs	r3, r1
 8003100:	4943      	ldr	r1, [pc, #268]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003102:	4313      	orrs	r3, r2
 8003104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d17c      	bne.n	8003206 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800310c:	4b40      	ldr	r3, [pc, #256]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a3f      	ldr	r2, [pc, #252]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fd fdec 	bl	8000cf4 <HAL_GetTick>
 800311c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800311e:	e009      	b.n	8003134 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003120:	f7fd fde8 	bl	8000cf4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	73fb      	strb	r3, [r7, #15]
        break;
 8003132:	e005      	b.n	8003140 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003134:	4b36      	ldr	r3, [pc, #216]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ef      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d15f      	bne.n	8003206 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d110      	bne.n	800316e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800314c:	4b30      	ldr	r3, [pc, #192]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003154:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6892      	ldr	r2, [r2, #8]
 800315c:	0211      	lsls	r1, r2, #8
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	06d2      	lsls	r2, r2, #27
 8003164:	430a      	orrs	r2, r1
 8003166:	492a      	ldr	r1, [pc, #168]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	610b      	str	r3, [r1, #16]
 800316c:	e027      	b.n	80031be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d112      	bne.n	800319a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003174:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800317c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6892      	ldr	r2, [r2, #8]
 8003184:	0211      	lsls	r1, r2, #8
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6912      	ldr	r2, [r2, #16]
 800318a:	0852      	lsrs	r2, r2, #1
 800318c:	3a01      	subs	r2, #1
 800318e:	0552      	lsls	r2, r2, #21
 8003190:	430a      	orrs	r2, r1
 8003192:	491f      	ldr	r1, [pc, #124]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003194:	4313      	orrs	r3, r2
 8003196:	610b      	str	r3, [r1, #16]
 8003198:	e011      	b.n	80031be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800319a:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80031a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	0211      	lsls	r1, r2, #8
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6952      	ldr	r2, [r2, #20]
 80031b0:	0852      	lsrs	r2, r2, #1
 80031b2:	3a01      	subs	r2, #1
 80031b4:	0652      	lsls	r2, r2, #25
 80031b6:	430a      	orrs	r2, r1
 80031b8:	4915      	ldr	r1, [pc, #84]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031be:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fd fd93 	bl	8000cf4 <HAL_GetTick>
 80031ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031d0:	e009      	b.n	80031e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d2:	f7fd fd8f 	bl	8000cf4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d902      	bls.n	80031e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	73fb      	strb	r3, [r7, #15]
          break;
 80031e4:	e005      	b.n	80031f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ef      	beq.n	80031d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031f8:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4903      	ldr	r1, [pc, #12]	@ (8003210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e049      	b.n	80032ba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fbb8 	bl	80009b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f000 f8b0 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e066      	b.n	80033b0 <HAL_TIM_OC_ConfigChannel+0xec>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b14      	cmp	r3, #20
 80032ee:	d857      	bhi.n	80033a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 80032f0:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	0800334d 	.word	0x0800334d
 80032fc:	080033a1 	.word	0x080033a1
 8003300:	080033a1 	.word	0x080033a1
 8003304:	080033a1 	.word	0x080033a1
 8003308:	0800335b 	.word	0x0800335b
 800330c:	080033a1 	.word	0x080033a1
 8003310:	080033a1 	.word	0x080033a1
 8003314:	080033a1 	.word	0x080033a1
 8003318:	08003369 	.word	0x08003369
 800331c:	080033a1 	.word	0x080033a1
 8003320:	080033a1 	.word	0x080033a1
 8003324:	080033a1 	.word	0x080033a1
 8003328:	08003377 	.word	0x08003377
 800332c:	080033a1 	.word	0x080033a1
 8003330:	080033a1 	.word	0x080033a1
 8003334:	080033a1 	.word	0x080033a1
 8003338:	08003385 	.word	0x08003385
 800333c:	080033a1 	.word	0x080033a1
 8003340:	080033a1 	.word	0x080033a1
 8003344:	080033a1 	.word	0x080033a1
 8003348:	08003393 	.word	0x08003393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f8a0 	bl	8003498 <TIM_OC1_SetConfig>
      break;
 8003358:	e025      	b.n	80033a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f915 	bl	8003590 <TIM_OC2_SetConfig>
      break;
 8003366:	e01e      	b.n	80033a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f988 	bl	8003684 <TIM_OC3_SetConfig>
      break;
 8003374:	e017      	b.n	80033a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f9f9 	bl	8003774 <TIM_OC4_SetConfig>
      break;
 8003382:	e010      	b.n	80033a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fa50 	bl	8003830 <TIM_OC5_SetConfig>
      break;
 8003390:	e009      	b.n	80033a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 faa1 	bl	80038e0 <TIM_OC6_SetConfig>
      break;
 800339e:	e002      	b.n	80033a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
      break;
 80033a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a30      	ldr	r2, [pc, #192]	@ (800348c <TIM_Base_SetConfig+0xd4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0x20>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d108      	bne.n	80033ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a27      	ldr	r2, [pc, #156]	@ (800348c <TIM_Base_SetConfig+0xd4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00b      	beq.n	800340a <TIM_Base_SetConfig+0x52>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f8:	d007      	beq.n	800340a <TIM_Base_SetConfig+0x52>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <TIM_Base_SetConfig+0xd8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d003      	beq.n	800340a <TIM_Base_SetConfig+0x52>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a23      	ldr	r2, [pc, #140]	@ (8003494 <TIM_Base_SetConfig+0xdc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d108      	bne.n	800341c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a12      	ldr	r2, [pc, #72]	@ (800348c <TIM_Base_SetConfig+0xd4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_Base_SetConfig+0xa0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a11      	ldr	r2, [pc, #68]	@ (8003490 <TIM_Base_SetConfig+0xd8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_Base_SetConfig+0xa0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a10      	ldr	r2, [pc, #64]	@ (8003494 <TIM_Base_SetConfig+0xdc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d103      	bne.n	8003460 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	611a      	str	r2, [r3, #16]
  }
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400

08003498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 0201 	bic.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 0302 	bic.w	r3, r3, #2
 80034e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a24      	ldr	r2, [pc, #144]	@ (8003584 <TIM_OC1_SetConfig+0xec>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_OC1_SetConfig+0x70>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <TIM_OC1_SetConfig+0xf0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_OC1_SetConfig+0x70>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a22      	ldr	r2, [pc, #136]	@ (800358c <TIM_OC1_SetConfig+0xf4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10c      	bne.n	8003522 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0308 	bic.w	r3, r3, #8
 800350e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <TIM_OC1_SetConfig+0xec>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_OC1_SetConfig+0xa2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <TIM_OC1_SetConfig+0xf0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_OC1_SetConfig+0xa2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a15      	ldr	r2, [pc, #84]	@ (800358c <TIM_OC1_SetConfig+0xf4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d111      	bne.n	800355e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40014000 	.word	0x40014000
 800358c:	40014400 	.word	0x40014400

08003590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f023 0210 	bic.w	r2, r3, #16
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0320 	bic.w	r3, r3, #32
 80035de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <TIM_OC2_SetConfig+0xe8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10d      	bne.n	8003610 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800360e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <TIM_OC2_SetConfig+0xe8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_OC2_SetConfig+0x98>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a18      	ldr	r2, [pc, #96]	@ (800367c <TIM_OC2_SetConfig+0xec>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_OC2_SetConfig+0x98>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <TIM_OC2_SetConfig+0xf0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d113      	bne.n	8003650 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800362e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400

08003684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a21      	ldr	r2, [pc, #132]	@ (8003768 <TIM_OC3_SetConfig+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10d      	bne.n	8003702 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <TIM_OC3_SetConfig+0xe4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <TIM_OC3_SetConfig+0x96>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a17      	ldr	r2, [pc, #92]	@ (800376c <TIM_OC3_SetConfig+0xe8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_OC3_SetConfig+0x96>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <TIM_OC3_SetConfig+0xec>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d113      	bne.n	8003742 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	621a      	str	r2, [r3, #32]
}
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400

08003774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	031b      	lsls	r3, r3, #12
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a14      	ldr	r2, [pc, #80]	@ (8003824 <TIM_OC4_SetConfig+0xb0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_OC4_SetConfig+0x74>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a13      	ldr	r2, [pc, #76]	@ (8003828 <TIM_OC4_SetConfig+0xb4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_OC4_SetConfig+0x74>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a12      	ldr	r2, [pc, #72]	@ (800382c <TIM_OC4_SetConfig+0xb8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d109      	bne.n	80037fc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400

08003830 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003874:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a13      	ldr	r2, [pc, #76]	@ (80038d4 <TIM_OC5_SetConfig+0xa4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_OC5_SetConfig+0x6a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <TIM_OC5_SetConfig+0xa8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_OC5_SetConfig+0x6a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <TIM_OC5_SetConfig+0xac>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d109      	bne.n	80038ae <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400

080038e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	051b      	lsls	r3, r3, #20
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <TIM_OC6_SetConfig+0xa8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_OC6_SetConfig+0x6c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a13      	ldr	r2, [pc, #76]	@ (800398c <TIM_OC6_SetConfig+0xac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_OC6_SetConfig+0x6c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a12      	ldr	r2, [pc, #72]	@ (8003990 <TIM_OC6_SetConfig+0xb0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d109      	bne.n	8003960 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	029b      	lsls	r3, r3, #10
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400

08003994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e04f      	b.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a21      	ldr	r2, [pc, #132]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a14      	ldr	r2, [pc, #80]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d004      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a10      	ldr	r2, [pc, #64]	@ (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10c      	bne.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40014000 	.word	0x40014000

08003a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e060      	b.n	8003b3e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a14      	ldr	r2, [pc, #80]	@ (8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d115      	bne.n	8003b2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	051b      	lsls	r3, r3, #20
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40012c00 	.word	0x40012c00

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e040      	b.n	8003be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fc ff92 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	@ 0x24
 8003b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa54 	bl	8004044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f825 	bl	8003bec <UART_SetConfig>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e01b      	b.n	8003be4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fad3 	bl	8004188 <UART_CheckIdleState>
 8003be2:	4603      	mov	r3, r0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b08a      	sub	sp, #40	@ 0x28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4bb4      	ldr	r3, [pc, #720]	@ (8003eec <UART_SetConfig+0x300>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4aa9      	ldr	r2, [pc, #676]	@ (8003ef0 <UART_SetConfig+0x304>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c54:	4313      	orrs	r3, r2
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4aa0      	ldr	r2, [pc, #640]	@ (8003ef4 <UART_SetConfig+0x308>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d126      	bne.n	8003cc4 <UART_SetConfig+0xd8>
 8003c76:	4ba0      	ldr	r3, [pc, #640]	@ (8003ef8 <UART_SetConfig+0x30c>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d81b      	bhi.n	8003cbc <UART_SetConfig+0xd0>
 8003c84:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <UART_SetConfig+0xa0>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cb5 	.word	0x08003cb5
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca2:	e080      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e07c      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e078      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e074      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e070      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a8c      	ldr	r2, [pc, #560]	@ (8003efc <UART_SetConfig+0x310>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d138      	bne.n	8003d40 <UART_SetConfig+0x154>
 8003cce:	4b8a      	ldr	r3, [pc, #552]	@ (8003ef8 <UART_SetConfig+0x30c>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d82d      	bhi.n	8003d38 <UART_SetConfig+0x14c>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <UART_SetConfig+0xf8>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003d39 	.word	0x08003d39
 8003cf0:	08003d39 	.word	0x08003d39
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d39 	.word	0x08003d39
 8003d14:	08003d31 	.word	0x08003d31
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1e:	e042      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d20:	2302      	movs	r3, #2
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d26:	e03e      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2e:	e03a      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d30:	2308      	movs	r3, #8
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d36:	e036      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3e:	e032      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef0 <UART_SetConfig+0x304>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d12a      	bne.n	8003da0 <UART_SetConfig+0x1b4>
 8003d4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef8 <UART_SetConfig+0x30c>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d58:	d01a      	beq.n	8003d90 <UART_SetConfig+0x1a4>
 8003d5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d5e:	d81b      	bhi.n	8003d98 <UART_SetConfig+0x1ac>
 8003d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d64:	d00c      	beq.n	8003d80 <UART_SetConfig+0x194>
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6a:	d815      	bhi.n	8003d98 <UART_SetConfig+0x1ac>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <UART_SetConfig+0x18c>
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d74:	d008      	beq.n	8003d88 <UART_SetConfig+0x19c>
 8003d76:	e00f      	b.n	8003d98 <UART_SetConfig+0x1ac>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7e:	e012      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d80:	2302      	movs	r3, #2
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d86:	e00e      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8e:	e00a      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d90:	2308      	movs	r3, #8
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d96:	e006      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9e:	e002      	b.n	8003da6 <UART_SetConfig+0x1ba>
 8003da0:	2310      	movs	r3, #16
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a51      	ldr	r2, [pc, #324]	@ (8003ef0 <UART_SetConfig+0x304>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d17a      	bne.n	8003ea6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003db0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d824      	bhi.n	8003e02 <UART_SetConfig+0x216>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <UART_SetConfig+0x1d4>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003df3 	.word	0x08003df3
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003e03 	.word	0x08003e03
 8003ddc:	08003e03 	.word	0x08003e03
 8003de0:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7fe fea2 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 8003de8:	61f8      	str	r0, [r7, #28]
        break;
 8003dea:	e010      	b.n	8003e0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b44      	ldr	r3, [pc, #272]	@ (8003f00 <UART_SetConfig+0x314>)
 8003dee:	61fb      	str	r3, [r7, #28]
        break;
 8003df0:	e00d      	b.n	8003e0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fe03 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8003df6:	61f8      	str	r0, [r7, #28]
        break;
 8003df8:	e009      	b.n	8003e0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dfe:	61fb      	str	r3, [r7, #28]
        break;
 8003e00:	e005      	b.n	8003e0e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8107 	beq.w	8004024 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d305      	bcc.n	8003e32 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d903      	bls.n	8003e3a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e38:	e0f4      	b.n	8004024 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	461c      	mov	r4, r3
 8003e40:	4615      	mov	r5, r2
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	022b      	lsls	r3, r5, #8
 8003e4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e50:	0222      	lsls	r2, r4, #8
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	6849      	ldr	r1, [r1, #4]
 8003e56:	0849      	lsrs	r1, r1, #1
 8003e58:	2000      	movs	r0, #0
 8003e5a:	4688      	mov	r8, r1
 8003e5c:	4681      	mov	r9, r0
 8003e5e:	eb12 0a08 	adds.w	sl, r2, r8
 8003e62:	eb43 0b09 	adc.w	fp, r3, r9
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e74:	4650      	mov	r0, sl
 8003e76:	4659      	mov	r1, fp
 8003e78:	f7fc f9a8 	bl	80001cc <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e8a:	d308      	bcc.n	8003e9e <UART_SetConfig+0x2b2>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e92:	d204      	bcs.n	8003e9e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	e0c2      	b.n	8004024 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ea4:	e0be      	b.n	8004024 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eae:	d16a      	bne.n	8003f86 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d834      	bhi.n	8003f22 <UART_SetConfig+0x336>
 8003eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <UART_SetConfig+0x2d4>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003f0d 	.word	0x08003f0d
 8003ecc:	08003f23 	.word	0x08003f23
 8003ed0:	08003f13 	.word	0x08003f13
 8003ed4:	08003f23 	.word	0x08003f23
 8003ed8:	08003f23 	.word	0x08003f23
 8003edc:	08003f23 	.word	0x08003f23
 8003ee0:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f7fe fe22 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 8003ee8:	61f8      	str	r0, [r7, #28]
        break;
 8003eea:	e020      	b.n	8003f2e <UART_SetConfig+0x342>
 8003eec:	efff69f3 	.word	0xefff69f3
 8003ef0:	40008000 	.word	0x40008000
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40004400 	.word	0x40004400
 8003f00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fe28 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8003f08:	61f8      	str	r0, [r7, #28]
        break;
 8003f0a:	e010      	b.n	8003f2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8004040 <UART_SetConfig+0x454>)
 8003f0e:	61fb      	str	r3, [r7, #28]
        break;
 8003f10:	e00d      	b.n	8003f2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fd73 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8003f16:	61f8      	str	r0, [r7, #28]
        break;
 8003f18:	e009      	b.n	8003f2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f1e:	61fb      	str	r3, [r7, #28]
        break;
 8003f20:	e005      	b.n	8003f2e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d077      	beq.n	8004024 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	005a      	lsls	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	441a      	add	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d916      	bls.n	8003f7e <UART_SetConfig+0x392>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f56:	d212      	bcs.n	8003f7e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f023 030f 	bic.w	r3, r3, #15
 8003f60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	8afb      	ldrh	r3, [r7, #22]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	8afa      	ldrh	r2, [r7, #22]
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e052      	b.n	8004024 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f84:	e04e      	b.n	8004024 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d827      	bhi.n	8003fde <UART_SetConfig+0x3f2>
 8003f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f94 <UART_SetConfig+0x3a8>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fdf 	.word	0x08003fdf
 8003fa4:	08003fcf 	.word	0x08003fcf
 8003fa8:	08003fdf 	.word	0x08003fdf
 8003fac:	08003fdf 	.word	0x08003fdf
 8003fb0:	08003fdf 	.word	0x08003fdf
 8003fb4:	08003fd7 	.word	0x08003fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7fe fdb8 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 8003fbc:	61f8      	str	r0, [r7, #28]
        break;
 8003fbe:	e014      	b.n	8003fea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7fe fdca 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8003fc4:	61f8      	str	r0, [r7, #28]
        break;
 8003fc6:	e010      	b.n	8003fea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <UART_SetConfig+0x454>)
 8003fca:	61fb      	str	r3, [r7, #28]
        break;
 8003fcc:	e00d      	b.n	8003fea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fce:	f7fe fd15 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8003fd2:	61f8      	str	r0, [r7, #28]
        break;
 8003fd4:	e009      	b.n	8003fea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fda:	61fb      	str	r3, [r7, #28]
        break;
 8003fdc:	e005      	b.n	8003fea <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fe8:	bf00      	nop
    }

    if (pclk != 0U)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d019      	beq.n	8004024 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	085a      	lsrs	r2, r3, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d909      	bls.n	800401e <UART_SetConfig+0x432>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	d205      	bcs.n	800401e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e002      	b.n	8004024 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004030:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004034:	4618      	mov	r0, r3
 8004036:	3728      	adds	r7, #40	@ 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403e:	bf00      	nop
 8004040:	00f42400 	.word	0x00f42400

08004044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01a      	beq.n	800415a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004142:	d10a      	bne.n	800415a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	605a      	str	r2, [r3, #4]
  }
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b098      	sub	sp, #96	@ 0x60
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004198:	f7fc fdac 	bl	8000cf4 <HAL_GetTick>
 800419c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d12e      	bne.n	800420a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	2200      	movs	r2, #0
 80041b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f88c 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d021      	beq.n	800420a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041da:	653b      	str	r3, [r7, #80]	@ 0x50
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e6      	bne.n	80041c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e062      	b.n	80042d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b04      	cmp	r3, #4
 8004216:	d149      	bne.n	80042ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004218:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004220:	2200      	movs	r2, #0
 8004222:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f856 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d03c      	beq.n	80042ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	623b      	str	r3, [r7, #32]
   return(result);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004250:	633b      	str	r3, [r7, #48]	@ 0x30
 8004252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60fb      	str	r3, [r7, #12]
   return(result);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004284:	61fa      	str	r2, [r7, #28]
 8004286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	617b      	str	r3, [r7, #20]
   return(result);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e011      	b.n	80042d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3758      	adds	r7, #88	@ 0x58
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	e04f      	b.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d04b      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fc fcff 	bl	8000cf4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <UART_WaitOnFlagUntilTimeout+0x30>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e04e      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d037      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b80      	cmp	r3, #128	@ 0x80
 800431e:	d034      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b40      	cmp	r3, #64	@ 0x40
 8004324:	d031      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d110      	bne.n	8004356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f838 	bl	80043b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2208      	movs	r2, #8
 8004346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e029      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004364:	d111      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800436e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f81e 	bl	80043b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e00f      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0a0      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b095      	sub	sp, #84	@ 0x54
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e6      	bne.n	80043ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800440c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004424:	2b01      	cmp	r3, #1
 8004426:	d118      	bne.n	800445a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	60bb      	str	r3, [r7, #8]
   return(result);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f023 0310 	bic.w	r3, r3, #16
 800443c:	647b      	str	r3, [r7, #68]	@ 0x44
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e6      	bne.n	8004428 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800446e:	bf00      	nop
 8004470:	3754      	adds	r7, #84	@ 0x54
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <memset>:
 800447a:	4402      	add	r2, r0
 800447c:	4603      	mov	r3, r0
 800447e:	4293      	cmp	r3, r2
 8004480:	d100      	bne.n	8004484 <memset+0xa>
 8004482:	4770      	bx	lr
 8004484:	f803 1b01 	strb.w	r1, [r3], #1
 8004488:	e7f9      	b.n	800447e <memset+0x4>
	...

0800448c <__libc_init_array>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4d0d      	ldr	r5, [pc, #52]	@ (80044c4 <__libc_init_array+0x38>)
 8004490:	4c0d      	ldr	r4, [pc, #52]	@ (80044c8 <__libc_init_array+0x3c>)
 8004492:	1b64      	subs	r4, r4, r5
 8004494:	10a4      	asrs	r4, r4, #2
 8004496:	2600      	movs	r6, #0
 8004498:	42a6      	cmp	r6, r4
 800449a:	d109      	bne.n	80044b0 <__libc_init_array+0x24>
 800449c:	4d0b      	ldr	r5, [pc, #44]	@ (80044cc <__libc_init_array+0x40>)
 800449e:	4c0c      	ldr	r4, [pc, #48]	@ (80044d0 <__libc_init_array+0x44>)
 80044a0:	f000 f818 	bl	80044d4 <_init>
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	2600      	movs	r6, #0
 80044aa:	42a6      	cmp	r6, r4
 80044ac:	d105      	bne.n	80044ba <__libc_init_array+0x2e>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b4:	4798      	blx	r3
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7ee      	b.n	8004498 <__libc_init_array+0xc>
 80044ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80044be:	4798      	blx	r3
 80044c0:	3601      	adds	r6, #1
 80044c2:	e7f2      	b.n	80044aa <__libc_init_array+0x1e>
 80044c4:	0800453c 	.word	0x0800453c
 80044c8:	0800453c 	.word	0x0800453c
 80044cc:	0800453c 	.word	0x0800453c
 80044d0:	08004540 	.word	0x08004540

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
